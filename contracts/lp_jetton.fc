#include "imports/stdlib.fc";

;; Storage variables
global int total_supply;
global slice admin_address;
global cell content;
global cell jetton_wallet_code;

() load_data() impure {
    var ds = get_data().begin_parse(); ;; get the data from the permanent storage
    total_supply = ds~load_coins(); ;; get the coins amount
    admin_address = ds~load_msg_addr(); ;; get the message sender address
    content = ds~load_ref(); ;; loads the first reference from the slice
    jetton_wallet_code = ds~load_ref();
    ds.end_parse();
}

() save_data() impure {
    set_data( begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(content)
        .store_ref(jetton_wallet_code)
        .end_cell()
    );
}

() mint_tokens(slice to_address, int amount, slice response_destination) impure {
    cell staet_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(staet_init);

    cell msg_body = begin_cell()
        .store_uint(op::internal_transfer(), 32)
        .store_uint(0, 64) ;; query_id
        .store_coins(amount)
        .store_slice(my_address()) ;; from address
        .store_slice(response_destination)
        .store_coins(0) ;; forward ton_amount
        .store_int(0, 1) ;;forward_payload in this slice, not seperate cell
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(msg_body);
    
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees seperately, revert on errors
    total_supply += amount;
    save_data();
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ingore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip the destination(dst) address
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee(Instance Hypercube Routing Fee)
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_ton_amount

    load_data();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        mint_tokens(to_address, amount, response_destination);
        return ();
    }

    if(op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74, 
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code)), sender_address
        );
        total_supply -= jetton_amount;
        save_data();

        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);

            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);

}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell wallet_code) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(wallet_code)
        .store_dict(begin_cell().store_slice(owner_address).store_slice(jetton_master_address).end_cell())
        .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address,jetton_master_address,wallet_code));
}